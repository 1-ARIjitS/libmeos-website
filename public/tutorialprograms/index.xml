<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial Programs on MEOS</title>
    <link>/tutorialprograms/</link>
    <description>Recent content in Tutorial Programs on MEOS</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 29 Jul 2022 14:28:47 +0200</lastBuildDate><atom:link href="/tutorialprograms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Aggregating Trips</title>
      <link>/tutorialprograms/meos_aggregate_berlinmod/</link>
      <pubDate>Fri, 29 Jul 2022 13:57:17 +0200</pubDate>
      
      <guid>/tutorialprograms/meos_aggregate_berlinmod/</guid>
      <description>meos_aggregate_berlinmod.c
This program reads a CSV file containing synthetic trip data in Brussels generated by the MobilityDB-BerlinMOD generator and computes
the extent, that is, the bounding box of the spatial and time dimensions represented as an STBOX the temporal count, that is, the evolution on time of the number of vehicles travelling at an hour granularity. The output of the program is given next.
61 trip records read Extent ------ SRID=3857;STBOX XT(((473212.</description>
    </item>
    
    <item>
      <title>Assembling Trips</title>
      <link>/tutorialprograms/meos_assemble_ais/</link>
      <pubDate>Fri, 29 Jul 2022 13:57:17 +0200</pubDate>
      
      <guid>/tutorialprograms/meos_assemble_ais/</guid>
      <description>meos_assemble_ais.c
This program reads AIS data from a CSV file, constructs trips from these records, and outputs for each trip the MMSI, the number of instants, and the distance travelled.
The output of the program is given next.
156837 records read. 0 incomplete records ignored. 5 trips read. MMSI: 265513270, Number of input instants: 21799, Number of instants: 6, Distance travelled 11.695976 MMSI: 219027804, Number of input instants: 38326, Number of instants: 3285, Distance travelled 64865.</description>
    </item>
    
    <item>
      <title>Clipping Trips to Geometries</title>
      <link>/tutorialprograms/meos_clip_berlinmod/</link>
      <pubDate>Fri, 29 Jul 2022 13:57:17 +0200</pubDate>
      
      <guid>/tutorialprograms/meos_clip_berlinmod/</guid>
      <description>meos_clip_berlinmod.c
This program reads a CSV file containing synthetic trip data in Brussels generated by the MobilityDB-BerlinMOD generator and computes the distance traversed by the trips in the 19 Brussels municipalities (communes in French).
The output of the program is given next.
19 commune records read Brussels region record read Reading trip records ******************************************************* 55 trip records read. ----------------------------------------------------------------------------------------------------------------------------------------- | Commmunes ----------------------------------------------------------------------------------------------------------------------------------------------------- Veh | Distance | 2 4 6 7 9 10 11 12 14 15 16 17 18 19 | Inside | Outside --------------------------------------------------------------------------------------------------------------------------------------------------------- 1 | 256.</description>
    </item>
    
    <item>
      <title>Disassembling Trips</title>
      <link>/tutorialprograms/meos_disassemble_berlinmod/</link>
      <pubDate>Fri, 29 Jul 2022 13:57:17 +0200</pubDate>
      
      <guid>/tutorialprograms/meos_disassemble_berlinmod/</guid>
      <description>meos_disassemble_berlinmod.c
This program reads a CSV file containing synthetic trip data in Brussels generated by the MobilityDB-BerlinMOD generator, disassembles the trips into individual observations, and write them in a CSV file ordered by timestamp.
The output of the program is given next.
55 trip records read. 76024 observation records written. The CSV file generated by the program is given next.
tripid,vehid,day,seqno,geom,t 3,3,2020-06-01,1,POINT(496102.813654 6595154.145012),2020-06-01 08:10:09.852+02 3,3,2020-06-01,1,POINT(496105.474664 6595158.378099),2020-06-01 08:10:11.352+02 3,3,2020-06-01,1,POINT(496107.99001 6595162.379464),2020-06-01 08:10:12.202733+02 [.</description>
    </item>
    
    <item>
      <title>My First MEOS Program</title>
      <link>/tutorialprograms/meos_hello_world/</link>
      <pubDate>Fri, 29 Jul 2022 13:57:17 +0200</pubDate>
      
      <guid>/tutorialprograms/meos_hello_world/</guid>
      <description>meos_hello_world.c
This program creates some temporal values from their WKT format and output them in MF-JSON format.
The output of the program is given next.
-------------------- | Temporal Instant | -------------------- WKT: ---- POINT(1 1)@2000-01-01 MF-JSON: -------- { &amp;#34;type&amp;#34;: &amp;#34;MovingGeomPoint&amp;#34;, &amp;#34;stBoundedBy&amp;#34;: { &amp;#34;bbox&amp;#34;: [ [ 1, 1 ], [ 1, 1 ] ], &amp;#34;period&amp;#34;: { &amp;#34;begin&amp;#34;: &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;end&amp;#34;: &amp;#34;2000-01-01T00:00:00+01&amp;#34; } }, &amp;#34;coordinates&amp;#34;: [ 1, 1 ], &amp;#34;datetimes&amp;#34;: &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;interpolations&amp;#34;: [ &amp;#34;Discrete&amp;#34; ] } ------------------------------------------------- | Temporal Sequence with Discrete Interpolation | ------------------------------------------------- WKT: ---- {POINT(1 1)@2000-01-01, POINT(2 2)@2000-01-02} MF-JSON: -------- { &amp;#34;type&amp;#34;: &amp;#34;MovingGeomPoint&amp;#34;, &amp;#34;stBoundedBy&amp;#34;: { &amp;#34;bbox&amp;#34;: [ [ 1, 1 ], [ 2, 2 ] ], &amp;#34;period&amp;#34;: { &amp;#34;begin&amp;#34;: &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;end&amp;#34;: &amp;#34;2000-01-02T00:00:00+01&amp;#34; } }, &amp;#34;coordinates&amp;#34;: [ [ 1, 1 ], [ 2, 2 ] ], &amp;#34;datetimes&amp;#34;: [ &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;2000-01-02T00:00:00+01&amp;#34; ], &amp;#34;lower_inc&amp;#34;: true, &amp;#34;upper_inc&amp;#34;: true, &amp;#34;interpolations&amp;#34;: [ &amp;#34;Discrete&amp;#34; ] } ----------------------------------------------- | Temporal Sequence with Linear Interpolation | ----------------------------------------------- WKT: ---- [POINT(1 1)@2000-01-01, POINT(2 2)@2000-01-02] MF-JSON: -------- { &amp;#34;type&amp;#34;: &amp;#34;MovingGeomPoint&amp;#34;, &amp;#34;stBoundedBy&amp;#34;: { &amp;#34;bbox&amp;#34;: [ [ 1, 1 ], [ 2, 2 ] ], &amp;#34;period&amp;#34;: { &amp;#34;begin&amp;#34;: &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;end&amp;#34;: &amp;#34;2000-01-02T00:00:00+01&amp;#34; } }, &amp;#34;coordinates&amp;#34;: [ [ 1, 1 ], [ 2, 2 ] ], &amp;#34;datetimes&amp;#34;: [ &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;2000-01-02T00:00:00+01&amp;#34; ], &amp;#34;lower_inc&amp;#34;: true, &amp;#34;upper_inc&amp;#34;: true, &amp;#34;interpolations&amp;#34;: [ &amp;#34;Linear&amp;#34; ] } ------------------------------------------------- | Temporal Sequence with Stepwise Interpolation | ------------------------------------------------- WKT: ---- Interp=Stepwise;[POINT(1 1)@2000-01-01, POINT(2 2)@2000-01-02] MF-JSON: -------- { &amp;#34;type&amp;#34;: &amp;#34;MovingGeomPoint&amp;#34;, &amp;#34;stBoundedBy&amp;#34;: { &amp;#34;bbox&amp;#34;: [ [ 1, 1 ], [ 2, 2 ] ], &amp;#34;period&amp;#34;: { &amp;#34;begin&amp;#34;: &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;end&amp;#34;: &amp;#34;2000-01-02T00:00:00+01&amp;#34; } }, &amp;#34;coordinates&amp;#34;: [ [ 1, 1 ], [ 2, 2 ] ], &amp;#34;datetimes&amp;#34;: [ &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;2000-01-02T00:00:00+01&amp;#34; ], &amp;#34;lower_inc&amp;#34;: true, &amp;#34;upper_inc&amp;#34;: true, &amp;#34;interpolations&amp;#34;: [ &amp;#34;Stepwise&amp;#34; ] } --------------------------------------------------- | Temporal Sequence Set with Linear Interpolation | --------------------------------------------------- WKT: ---- {[POINT(1 1)@2000-01-01, POINT(2 2)@2000-01-02],[POINT(3 3)@2000-01-03, POINT(3 3)@2000-01-04]} MF-JSON: -------- { &amp;#34;type&amp;#34;: &amp;#34;MovingGeomPoint&amp;#34;, &amp;#34;stBoundedBy&amp;#34;: { &amp;#34;bbox&amp;#34;: [ [ 1, 1 ], [ 3, 3 ] ], &amp;#34;period&amp;#34;: { &amp;#34;begin&amp;#34;: &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;end&amp;#34;: &amp;#34;2000-01-04T00:00:00+01&amp;#34; } }, &amp;#34;sequences&amp;#34;: [ { &amp;#34;coordinates&amp;#34;: [ [ 1, 1 ], [ 2, 2 ] ], &amp;#34;datetimes&amp;#34;: [ &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;2000-01-02T00:00:00+01&amp;#34; ], &amp;#34;lower_inc&amp;#34;: true, &amp;#34;upper_inc&amp;#34;: true }, { &amp;#34;coordinates&amp;#34;: [ [ 3, 3 ], [ 3, 3 ] ], &amp;#34;datetimes&amp;#34;: [ &amp;#34;2000-01-03T00:00:00+01&amp;#34;, &amp;#34;2000-01-04T00:00:00+01&amp;#34; ], &amp;#34;lower_inc&amp;#34;: true, &amp;#34;upper_inc&amp;#34;: true } ], &amp;#34;interpolations&amp;#34;: [ &amp;#34;Linear&amp;#34; ] } ----------------------------------------------------- | Temporal Sequence Set with Stepwise Interpolation | ----------------------------------------------------- WKT: ---- Interp=Stepwise;{[POINT(1 1)@2000-01-01, POINT(2 2)@2000-01-02],[POINT(3 3)@2000-01-03, POINT(3 3)@2000-01-04]} MF-JSON: -------- { &amp;#34;type&amp;#34;: &amp;#34;MovingGeomPoint&amp;#34;, &amp;#34;stBoundedBy&amp;#34;: { &amp;#34;bbox&amp;#34;: [ [ 1, 1 ], [ 3, 3 ] ], &amp;#34;period&amp;#34;: { &amp;#34;begin&amp;#34;: &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;end&amp;#34;: &amp;#34;2000-01-04T00:00:00+01&amp;#34; } }, &amp;#34;sequences&amp;#34;: [ { &amp;#34;coordinates&amp;#34;: [ [ 1, 1 ], [ 2, 2 ] ], &amp;#34;datetimes&amp;#34;: [ &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;2000-01-02T00:00:00+01&amp;#34; ], &amp;#34;lower_inc&amp;#34;: true, &amp;#34;upper_inc&amp;#34;: true }, { &amp;#34;coordinates&amp;#34;: [ [ 3, 3 ], [ 3, 3 ] ], &amp;#34;datetimes&amp;#34;: [ &amp;#34;2000-01-03T00:00:00+01&amp;#34;, &amp;#34;2000-01-04T00:00:00+01&amp;#34; ], &amp;#34;lower_inc&amp;#34;: true, &amp;#34;upper_inc&amp;#34;: true } ], &amp;#34;interpolations&amp;#34;: [ &amp;#34;Stepwise&amp;#34; ] } The above ouput uses the pretty-printing options provided by the json-c library to facilite human reading.</description>
    </item>
    
    <item>
      <title>Reading from File</title>
      <link>/tutorialprograms/meos_read_ais/</link>
      <pubDate>Fri, 29 Jul 2022 13:57:17 +0200</pubDate>
      
      <guid>/tutorialprograms/meos_read_ais/</guid>
      <description>meos_read_ais.c
This program reads AIS data from a CSV file and outputs a few of these records converted into temporal values.
The output of the program is given next.
MMSI: 566948000, Location: POINT(4.62 55.57)@2021-01-08 01:10:46+01 SOG : 0.5@2021-01-08 01:10:46+01 MMSI: 566948000, Location: POINT(4.62 55.57)@2021-01-08 01:21:25+01 SOG : 0.1@2021-01-08 01:21:25+01 MMSI: 219001559, Location: POINT(9.98 57.59)@2021-01-08 01:33:48+01 SOG : 0.1@2021-01-08 01:33:48+01 ... MMSI: 219001559, Location: POINT(9.98 57.59)@2021-01-09 00:43:35+01 SOG : 0@2021-01-09 00:43:35+01 MMSI: 566948000, Location: POINT(4.</description>
    </item>
    
    <item>
      <title>Simplifying Trips</title>
      <link>/tutorialprograms/meos_simplify_berlinmod/</link>
      <pubDate>Fri, 29 Jul 2022 13:57:17 +0200</pubDate>
      
      <guid>/tutorialprograms/meos_simplify_berlinmod/</guid>
      <description>meos_simplify_berlinmod.c
This program reads a CSV file containing synthetic trip data in Brussels generated by the MobilityDB-BerlinMOD generator, simplifies the trips using both Douglas-Peucker (DP) and Synchronized Euclidean Distance (SED, also known as Top-Down Time Ratio simplification), and outputs for each trip the initial number of instants and the number of instants of the two simplified trips.
The output of the program is given next.
55 records read. 0 incomplete records ignored.</description>
    </item>
    
    <item>
      <title>Storing in MobilityDB</title>
      <link>/tutorialprograms/meos_store_ais/</link>
      <pubDate>Fri, 29 Jul 2022 13:57:17 +0200</pubDate>
      
      <guid>/tutorialprograms/meos_store_ais/</guid>
      <description>meos_store_ais.c
This program reads AIS data from a CSV file, converts them into temporal values, and stores them in MobilityDB. The program uses the libpq library to connect to PostgreSQL.
The output of the program is given next.
Creating the table in the database NOTICE: table &amp;#34;aisinstants&amp;#34; does not exist, skipping Start processing the file 156837 records read. 0 incomplete records ignored. Query &amp;#39;SELECT COUNT(*) FROM public.AISInstants&amp;#39; returned 156837 A similar result can be obtained in MobilityDB with the following SQL query, assuming that the CSV file has been previously loaded into the AISInput table.</description>
    </item>
    
    <item>
      <title>Stream Processing</title>
      <link>/tutorialprograms/meos_stream_ais/</link>
      <pubDate>Fri, 29 Jul 2022 13:57:17 +0200</pubDate>
      
      <guid>/tutorialprograms/meos_stream_ais/</guid>
      <description>meos_stream_ais.c
A simple program that reads AIS data from a CSV file, accumulates the observations in main memory and send the temporal values to a MobilityDB database when they reach a given number of instants in order to free the memory and ingest the newest observations. The program uses the libpq library to connect to PostgreSQL.
The output of the program is given next.
Creating the table AISTrips in the database Accumulating 1000 instants before sending them to the database (one marker every database update) ********************************************************************************************************** 156837 records read.</description>
    </item>
    
    <item>
      <title>Tiling Trips</title>
      <link>/tutorialprograms/meos_tile_berlinmod/</link>
      <pubDate>Fri, 29 Jul 2022 13:57:17 +0200</pubDate>
      
      <guid>/tutorialprograms/meos_tile_berlinmod/</guid>
      <description>meos_tile_berlinmod.c
This program reads a CSV file containing synthetic trip data in Brussels generated by the MobilityDB-BerlinMOD generator, splits the trips and the speed of these trips by tiles, and computes aggregate values of the count, duration, and distance of the tiles.
The output of the program is given next.
Processing records ******************************************************* 55 records read. 0 incomplete records ignored. ------------- Trip tiles ------------- Tile: (0,0), Box: SRID=3857;STBOX X(((470000,6575000),(475000,6580000))), Count: 8, Duration: 00:19:46.</description>
    </item>
    
  </channel>
</rss>
