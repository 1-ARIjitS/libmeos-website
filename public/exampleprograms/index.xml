<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Example Programs on MEOS</title>
    <link>/exampleprograms/</link>
    <description>Recent content in Example Programs on MEOS</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 29 Jul 2022 14:28:47 +0200</lastBuildDate><atom:link href="/exampleprograms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Assembling Trips</title>
      <link>/exampleprograms/meos_process_ais/</link>
      <pubDate>Fri, 29 Jul 2022 13:57:17 +0200</pubDate>
      
      <guid>/exampleprograms/meos_process_ais/</guid>
      <description>meos_process_ais.c
This program reads AIS data from a CSV file, constructs trips from these records, and outputs for each trip the MMSI, the number of instants, and the distance travelled.
The output of the program is given next.
156837 records read. 0 incomplete records ignored. 5 trips read. MMSI: 265513270, Number of input instants: 21799, Number of instants: 6, Distance travelled 11.695976 MMSI: 219027804, Number of input instants: 38326, Number of instants: 3285, Distance travelled 64865.</description>
    </item>
    
    <item>
      <title>Clipping Trips to Geometries</title>
      <link>/exampleprograms/meos_clip_berlinmod/</link>
      <pubDate>Fri, 29 Jul 2022 13:57:17 +0200</pubDate>
      
      <guid>/exampleprograms/meos_clip_berlinmod/</guid>
      <description>meos_clip_berlinmod.c
This program reads from a CSV file synthetic trip data in Brussels generated by the MobilityDB-BerlinMOD generator and computes the distance traversed by the trips in the 19 Brussels municipalities (communes in French).
The output of the program is given next.
19 commune records read. Brussels region record read. 64 trip records read. -------------------------------------------------------------------------------------------------------------------------------------------------- | Commmunes -------------------------------------------------------------------------------------------------------------------------------------------------------------- Veh | Distance | 2 4 6 7 8 9 10 11 12 14 15 16 17 18 19 | Outside | Inside ------------------------------------------------------------------------------------------------------------------------------------------------------------------ 1 | 393.</description>
    </item>
    
    <item>
      <title>My First MEOS Program</title>
      <link>/exampleprograms/meos_hello_world/</link>
      <pubDate>Fri, 29 Jul 2022 13:57:17 +0200</pubDate>
      
      <guid>/exampleprograms/meos_hello_world/</guid>
      <description>meos_hello_world.c
This program creates some temporal values from their WKT format and output them in MF-JSON format.
The output of the program is given next.
-------------------- | Temporal Instant | -------------------- WKT: ---- POINT(1 1)@2000-01-01 MF-JSON: -------- { &amp;#34;type&amp;#34;: &amp;#34;MovingGeomPoint&amp;#34;, &amp;#34;stBoundedBy&amp;#34;: { &amp;#34;bbox&amp;#34;: [ [ 1, 1 ], [ 1, 1 ] ], &amp;#34;period&amp;#34;: { &amp;#34;begin&amp;#34;: &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;end&amp;#34;: &amp;#34;2000-01-01T00:00:00+01&amp;#34; } }, &amp;#34;coordinates&amp;#34;: [ 1, 1 ], &amp;#34;datetimes&amp;#34;: &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;interpolations&amp;#34;: [ &amp;#34;Discrete&amp;#34; ] } ------------------------ | Temporal Instant Set | ------------------------ WKT: ---- {POINT(1 1)@2000-01-01, POINT(2 2)@2000-01-02} MF-JSON: -------- { &amp;#34;type&amp;#34;: &amp;#34;MovingGeomPoint&amp;#34;, &amp;#34;stBoundedBy&amp;#34;: { &amp;#34;bbox&amp;#34;: [ [ 1, 1 ], [ 2, 2 ] ], &amp;#34;period&amp;#34;: { &amp;#34;begin&amp;#34;: &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;end&amp;#34;: &amp;#34;2000-01-02T00:00:00+01&amp;#34; } }, &amp;#34;coordinates&amp;#34;: [ [ 1, 1 ], [ 2, 2 ] ], &amp;#34;datetimes&amp;#34;: [ &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;2000-01-02T00:00:00+01&amp;#34; ], &amp;#34;interpolations&amp;#34;: [ &amp;#34;Discrete&amp;#34; ] } --------------------- | Temporal Sequence | --------------------- WKT: ---- [POINT(1 1)@2000-01-01, POINT(2 2)@2000-01-02] MF-JSON: -------- { &amp;#34;type&amp;#34;: &amp;#34;MovingGeomPoint&amp;#34;, &amp;#34;stBoundedBy&amp;#34;: { &amp;#34;bbox&amp;#34;: [ [ 1, 1 ], [ 2, 2 ] ], &amp;#34;period&amp;#34;: { &amp;#34;begin&amp;#34;: &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;end&amp;#34;: &amp;#34;2000-01-02T00:00:00+01&amp;#34; } }, &amp;#34;coordinates&amp;#34;: [ [ 1, 1 ], [ 2, 2 ] ], &amp;#34;datetimes&amp;#34;: [ &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;2000-01-02T00:00:00+01&amp;#34; ], &amp;#34;lower_inc&amp;#34;: true, &amp;#34;upper_inc&amp;#34;: true, &amp;#34;interpolations&amp;#34;: [ &amp;#34;Linear&amp;#34; ] } ------------------------- | Temporal Sequence Set | ------------------------- WKT: ---- {[POINT(1 1)@2000-01-01, POINT(2 2)@2000-01-02],[POINT(3 3)@2000-01-03, POINT(3 3)@2000-01-04]} MF-JSON: -------- { &amp;#34;type&amp;#34;: &amp;#34;MovingGeomPoint&amp;#34;, &amp;#34;stBoundedBy&amp;#34;: { &amp;#34;bbox&amp;#34;: [ [ 1, 1 ], [ 3, 3 ] ], &amp;#34;period&amp;#34;: { &amp;#34;begin&amp;#34;: &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;end&amp;#34;: &amp;#34;2000-01-04T00:00:00+01&amp;#34; } }, &amp;#34;sequences&amp;#34;: [ { &amp;#34;coordinates&amp;#34;: [ [ 1, 1 ], [ 2, 2 ] ], &amp;#34;datetimes&amp;#34;: [ &amp;#34;2000-01-01T00:00:00+01&amp;#34;, &amp;#34;2000-01-02T00:00:00+01&amp;#34; ], &amp;#34;lower_inc&amp;#34;: true, &amp;#34;upper_inc&amp;#34;: true }, { &amp;#34;coordinates&amp;#34;: [ [ 3, 3 ], [ 3, 3 ] ], &amp;#34;datetimes&amp;#34;: [ &amp;#34;2000-01-03T00:00:00+01&amp;#34;, &amp;#34;2000-01-04T00:00:00+01&amp;#34; ], &amp;#34;lower_inc&amp;#34;: true, &amp;#34;upper_inc&amp;#34;: true } ], &amp;#34;interpolations&amp;#34;: [ &amp;#34;Linear&amp;#34; ] } The above ouput uses the pretty-printing options provided by the json-c library to facilite human reading.</description>
    </item>
    
    <item>
      <title>Reading from File</title>
      <link>/exampleprograms/meos_read_ais/</link>
      <pubDate>Fri, 29 Jul 2022 13:57:17 +0200</pubDate>
      
      <guid>/exampleprograms/meos_read_ais/</guid>
      <description>meos_read_ais.c
This program reads AIS data from a CSV file and outputs a few of these records converted into temporal values.
The output of the program is given next.
MMSI: 566948000, Location: POINT(4.62 55.57)@2021-01-08 01:10:46+01 SOG : 0.5@2021-01-08 01:10:46+01 MMSI: 566948000, Location: POINT(4.62 55.57)@2021-01-08 01:21:25+01 SOG : 0.1@2021-01-08 01:21:25+01 MMSI: 219001559, Location: POINT(9.98 57.59)@2021-01-08 01:33:48+01 SOG : 0.1@2021-01-08 01:33:48+01 ... MMSI: 219001559, Location: POINT(9.98 57.59)@2021-01-09 00:43:35+01 SOG : 0@2021-01-09 00:43:35+01 MMSI: 566948000, Location: POINT(4.</description>
    </item>
    
    <item>
      <title>Simplifying Trips</title>
      <link>/exampleprograms/meos_simplify_berlinmod/</link>
      <pubDate>Fri, 29 Jul 2022 13:57:17 +0200</pubDate>
      
      <guid>/exampleprograms/meos_simplify_berlinmod/</guid>
      <description>meos_simplify_berlinmod.c
This program reads from a CSV file synthetic trip data in Brussels generated by the MobilityDB-BerlinMOD generator, simplifies the trips using both Douglas-Peucker (DP) and Synchronized Euclidean Distance (SED, also known as Top-Down Time Ratio simplification), and outputs for each trip the initial number of instants and the number of instants of the two simplified trips.
The output of the program is given next.
64 records read. 0 incomplete records ignored.</description>
    </item>
    
    <item>
      <title>Storing in MobilityDB</title>
      <link>/exampleprograms/meos_store_ais/</link>
      <pubDate>Fri, 29 Jul 2022 13:57:17 +0200</pubDate>
      
      <guid>/exampleprograms/meos_store_ais/</guid>
      <description>meos_store_ais.c
This program reads AIS data from a CSV file, converts them into temporal values, and stores them in MobilityDB. The program uses the libpq library to connect to PostgreSQL.
The output of the program is given next.
Creating the table in the database NOTICE: table &amp;#34;meos_demo&amp;#34; does not exist, skipping Start processing the file 156837 records read. 0 incomplete records ignored. Query &amp;#39;SELECT COUNT(*) FROM public.MEOS_demo&amp;#39; returned 156837 </description>
    </item>
    
  </channel>
</rss>
